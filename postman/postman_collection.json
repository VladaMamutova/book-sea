{
	"info": {
		"_postman_id": "4b312aff-84cc-4a6c-868b-0bdc72e1aa38",
		"name": "Book Sea",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Books Service",
			"item": [
				{
					"name": "[authorization] Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorize\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.token).to.not.empty",
									"    pm.environment.set(\"book_token\", response.token)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "1",
									"type": "string"
								},
								{
									"key": "password",
									"value": "1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{books_url}}/auth",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Create book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create book\", function() {",
									"    pm.response.to.have.status(201)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.book_uid).to.not.empty",
									"    pm.environment.set(\"book_uid\", response.book_uid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Педагогическая поема\",\n    \"author\": {\n        \"first_name\": \"Антон\",\n        \"middle_name\": \"Семёнович\",\n        \"last_name\": \"Макаренко\"\n    },\n    \"genre\": \"роман\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books/",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Get book info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get book info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(response.genre).to.eq(\"роман\")",
									"    pm.expect(response.author.last_name).to.eq(\"Макаренко\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books/{{book_uid}}",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[authors] Get author info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.eq(\"Антон\")",
									"    pm.expect(response.middle_name).to.eq(\"Семёнович\")",
									"    pm.expect(response.last_name).to.eq(\"Макаренко\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/authors/{{author_uid}}",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"authors",
								"{{author_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[authors] Get author with books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author with books\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.eq(\"Антон\")",
									"    pm.expect(response.middle_name).to.eq(\"Семёнович\")",
									"    pm.expect(response.last_name).to.eq(\"Макаренко\")",
									"",
									"    const book_number = response.books.length",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    pm.expect(book_number).to.greaterThan(0)",
									"    pm.expect(response.books[book_number - 1].book_uid).to.eq(book_uid)",
									"    pm.expect(response.books[book_number - 1].name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(response.books[book_number - 1].genre).to.eq(\"роман\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/authors/{{author_uid}}/books",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"authors",
								"{{author_uid}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Get books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get books\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.greaterThan(0)",
									"    pm.expect(jsonData[0].book_uid).to.not.empty",
									"    pm.expect(jsonData[0].genre).to.not.empty",
									"    pm.expect(jsonData[0].author).to.not.empty",
									"    pm.expect(jsonData[0].author.first_name).to.not.empty",
									"    pm.expect(jsonData[0].author.last_name).to.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Get books by filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get books by filter\", function () {",
									"    const response = pm.response;",
									"    response.to.have.status(200);",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.eq(1)",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    const author_uid = pm.variables.get(\"author_uid\")",
									"    pm.expect(jsonData[0].book_uid).to.eq(book_uid)",
									"    pm.expect(jsonData[0].name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(jsonData[0].genre).to.eq(\"роман\")",
									"    pm.expect(jsonData[0].author.author_uid).to.eq(author_uid)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books?name=Педагогическая поема&genre=Роман&author=Макар&per_page=3",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "Педагогическая поема"
								},
								{
									"key": "genre",
									"value": "Роман"
								},
								{
									"key": "author",
									"value": "Макар"
								},
								{
									"key": "per_page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Add book to library",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add book to library\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{books_url}}/books/{{book_uid}}/library/{{library_uid}}",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}",
								"library",
								"{{library_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Get book libraries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author with books\", function() {",
									"    const response = pm.response;",
									"    response.to.have.status(200)",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.eq(1)",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    pm.expect(jsonData[0]).to.eq(library_uid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books/{{book_uid}}/libraries",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Remove book from library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Remove book from library\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{books_url}}/books/{{book_uid}}/library/{{library_uid}}",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}",
								"library",
								"{{library_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books] Delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete book\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{book_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{books_url}}/books/{{book_uid}}",
							"host": [
								"{{books_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Library Service",
			"item": [
				{
					"name": "[libraries] Get libraries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get libraries\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.greaterThan(0)",
									"    pm.expect(jsonData[0].library_uid).to.not.empty",
									"    pm.expect(jsonData[0].name).to.not.empty",
									"    pm.expect(jsonData[0].address).to.not.empty",
									"    pm.expect(jsonData[0].city).to.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Get library info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get library info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.name).to.eq(\"Центральная универсальная научная библиотека им. Н.А. Некрасова\")",
									"    pm.expect(response.city).to.eq(\"Москва\")",
									"    pm.expect(response.address).to.eq(\"ул. Бауманская, 58/25, стр. 14\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Add book to library",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add book to library\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/book/{{book_uid}}",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"book",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Get library books",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get library books\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    ",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    const book_number = jsonData.length",
									"    pm.expect(book_number).to.greaterThan(0)",
									"    pm.expect(jsonData[book_number - 1].book_uid).to.eq(book_uid)",
									"    pm.expect(jsonData[book_number - 1].available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/books",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Get library book info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get library book info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    pm.expect(response.library.library_uid).to.eq(library_uid)",
									"    pm.expect(response.available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/books/{{book_uid}}",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"books",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Take book from library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Take book from library\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();    ",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    pm.expect(response.taken_book_uid).to.not.empty",
									"    pm.expect(response.library_uid).to.eq(library_uid)",
									"    pm.expect(response.book_uid).to.eq(book_uid)",
									"    pm.expect(response.status).to.eq(\"new\")",
									"    pm.expect(response.date).to.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/book/{{book_uid}}/take",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"book",
								"{{book_uid}}",
								"take"
							]
						}
					},
					"response": []
				},
				{
					"name": "[taken_books] Get user taken books",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author with books\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\");",
									"",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    book_number = response.length",
									"    pm.expect(book_number).to.greaterThan(0)",
									"    pm.expect(response[book_number - 1].library_uid).to.eq(library_uid)",
									"    pm.expect(response[book_number - 1].book_uid).to.eq(book_uid)",
									"    pm.expect(response[book_number - 1].status).to.eq(\"new\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/taken_books/user/{{user_uid}}",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"taken_books",
								"user",
								"{{user_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Return book to library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return book to library\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"used\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/book/{{book_uid}}/return",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"book",
								"{{book_uid}}",
								"return"
							]
						}
					},
					"response": []
				},
				{
					"name": "[libraries] Remove book from library",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Remove book from library\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/libraries/{{library_uid}}/book/{{book_uid}}",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"libraries",
								"{{library_uid}}",
								"book",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Session Service",
			"item": [
				{
					"name": "[authentication] Authenticate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authenticate\", function() {",
									"    pm.response.to.have.status(200)",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.token).to.not.empty",
									"    pm.environment.set(\"admin_token\", response.token)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_url}}/auth",
							"host": [
								"{{session_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "[authentication] Verify",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_url}}/verify",
							"host": [
								"{{session_url}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "[users] Get users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get users\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.greaterThan(0)",
									"    pm.expect(jsonData[0].login).to.not.empty",
									"    pm.expect(jsonData[0].role).to.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_url}}/users",
							"host": [
								"{{session_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[users] Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create user\", function() {",
									"    pm.response.to.have.status(400)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.eq(\"Validation failed\")",
									"    pm.expect(response.details[0]).to.eq(\"Login has already been taken\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"user\",\n    \"password\": \"user\",\n    \"role\": \"user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_url}}/users",
							"host": [
								"{{session_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gateway Service",
			"item": [
				{
					"name": "[books]: Add book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add book\", function() {",
									"    pm.response.to.have.status(201)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.book_uid).to.not.empty",
									"    pm.environment.set(\"book_uid\", response.book_uid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Педагогическая поема\",\n    \"author\": {\n        \"first_name\": \"Антон\",\n        \"middle_name\": \"Семёнович\",\n        \"last_name\": \"Макаренко\"\n    },\n    \"genre\": \"роман\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/books/",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Get book info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get book info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(response.genre).to.eq(\"роман\")",
									"    pm.expect(response.author.last_name).to.eq(\"Макаренко\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/books/{{book_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Get author info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.eq(\"Антон\")",
									"    pm.expect(response.middle_name).to.eq(\"Семёнович\")",
									"    pm.expect(response.last_name).to.eq(\"Макаренко\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/author/{{author_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"author",
								"{{author_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Get author with books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get author with books\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.first_name).to.eq(\"Антон\")",
									"    pm.expect(response.middle_name).to.eq(\"Семёнович\")",
									"    pm.expect(response.last_name).to.eq(\"Макаренко\")",
									"",
									"    const book_number = response.books.length",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    pm.expect(book_number).to.greaterThan(0)",
									"    pm.expect(response.books[book_number - 1].book_uid).to.eq(book_uid)",
									"    pm.expect(response.books[book_number - 1].name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(response.books[book_number - 1].genre).to.eq(\"роман\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/author/{{author_uid}}/books",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"author",
								"{{author_uid}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Get books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successful with a status code of 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that it returns json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that it returns an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Check that it returns the required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.greaterThan(0)",
									"    pm.expect(jsonData[0].book_uid).to.not.empty",
									"    pm.expect(jsonData[0].genre).to.not.empty",
									"    pm.expect(jsonData[0].author).to.not.empty",
									"    pm.expect(jsonData[0].author.first_name).to.not.empty",
									"    pm.expect(jsonData[0].author.last_name).to.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/books/",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Get books by filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get books by filter\", function () {",
									"    const response = pm.response;",
									"    response.to.have.status(200);",
									"    pm.expect(response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.eq(1)",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    const author_uid = pm.variables.get(\"author_uid\")",
									"    pm.expect(jsonData[0].book_uid).to.eq(book_uid)",
									"    pm.expect(jsonData[0].name).to.eq(\"Педагогическая поема\")",
									"    pm.expect(jsonData[0].genre).to.eq(\"роман\")",
									"    pm.expect(jsonData[0].author.author_uid).to.eq(author_uid)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/books?name=Педагогическая поема&genre=Роман&author=Макар&per_page=3",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "Педагогическая поема"
								},
								{
									"key": "genre",
									"value": "Роман"
								},
								{
									"key": "author",
									"value": "Макар"
								},
								{
									"key": "per_page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[library] Get libraries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get libraries\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"    ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.greaterThan(0)",
									"    pm.expect(jsonData[0].library_uid).to.not.empty",
									"    pm.expect(jsonData[0].name).to.not.empty",
									"    pm.expect(jsonData[0].address).to.not.empty",
									"    pm.expect(jsonData[0].city).to.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/library",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library]: Add book to library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add book to library\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/library/{{library_uid}}/book/{{book_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library",
								"{{library_uid}}",
								"book",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library]: Get library books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get library books\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    ",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    const book_number = jsonData.length",
									"    pm.expect(book_number).to.greaterThan(0)",
									"    pm.expect(jsonData[book_number - 1].book_uid).to.eq(book_uid)",
									"    pm.expect(jsonData[book_number - 1].available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/library/{{library_uid}}/books",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library",
								"{{library_uid}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library] Find book in libraries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Find book in libraries\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    const library_number = jsonData.length",
									"    pm.expect(library_number).to.greaterThan(0)",
									"    pm.expect(jsonData[library_number - 1].library.library_uid).to.eq(library_uid)",
									"    pm.expect(jsonData[library_number - 1].available_count).to.eq(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/library/book/{{book_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library",
								"book",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library] Take book from library",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Take book from library\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"",
									"    const response = pm.response.json();    ",
									"    const library_uid = pm.variables.get(\"library_uid\")",
									"    const book_uid = pm.variables.get(\"book_uid\")",
									"    pm.expect(response.taken_book_uid).to.not.empty",
									"    pm.expect(response.library_uid).to.eq(library_uid)",
									"    pm.expect(response.book_uid).to.eq(book_uid)",
									"    pm.expect(response.status).to.eq(\"new\")",
									"    pm.expect(response.date).to.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/library/{{library_uid}}/book/{{book_uid}}/take",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library",
								"{{library_uid}}",
								"book",
								"{{book_uid}}",
								"take"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library] Return book to library",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return item\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"used\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}/library/{{library_uid}}/book/{{book_uid}}/return",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"library",
								"{{library_uid}}",
								"book",
								"{{book_uid}}",
								"return"
							]
						}
					},
					"response": []
				},
				{
					"name": "[library]: Remove book from library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Remove book from library\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway_url}}//library/{{library_uid}}/book/{{book_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"",
								"library",
								"{{library_uid}}",
								"book",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[books]: Remove book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Remove book\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/books/{{book_uid}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"books",
								"{{book_uid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}